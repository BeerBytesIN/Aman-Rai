class Solution {
public:
    int search(vector<int>&nums,int l,int h,int k)
    {
        
        while(l<=h)
        {
            int mid;
            mid=l+(h-l)/2;
            if(nums[mid]==k)
                return mid;
            else if(nums[mid]<k)
                l=mid+1;
            else
                h=mid-1;
        }
        return -1;
    }
    int search(vector<int>& nums, int target) {
        int i=0,j=nums.size()-1,n=nums.size();
        int pivot=-1;
        while(i<=j)
        {
            if(nums[i]<=nums[j]){pivot=i;break;}
            int mid=i+(j-i)/2;
            int prev=(mid-1+n)%n;
            int next=(mid+1)%n;
            if(nums[mid]<=nums[next] and nums[mid]<=nums[prev])
            {
                pivot=mid;break;
            }
            else if(nums[i]<=nums[mid])
                i=mid+1;
            else if(nums[mid]<=nums[j])
                j=mid-1;
        }
        cout<<pivot;
        i=0,j=n-1;
        if(pivot!=-1){
        if(target>=nums[pivot] and target<=nums[j])
            i=pivot;
        else
            j=pivot;
        }
        return search(nums,i,j,target);
    }
};