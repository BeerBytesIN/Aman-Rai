class Solution {
public:
    int largest(vector<int>& heights) {
     int n=heights.size();   
     vector<int>l(n),r(n);
      stack<int>s1;
      int i,j;
      for(i=0;i<n;i++)
      {
          l[i]=i+1;
          r[n-1-i]=i+1;
      }
      for(i=0;i<n;i++)
      {
          while(!s1.empty() and heights[s1.top()]>heights[i])
              s1.pop();
          if(!s1.empty())
          {
              l[i]=i-s1.top();
          }
          s1.push(i);
      }
          for(i=0;i<n;i++)
          cout<<l[i]<<" ";
      while(!s1.empty())s1.pop();
      for(i=n-1;i>=0;i--)
      {
          while(!s1.empty() and heights[s1.top()]>=heights[i])
              s1.pop();
          if(!s1.empty())
          {
              r[i]=s1.top()-i;
          }
          s1.push(i);
      }
        cout<<"\n";
        
          for(i=0;i<n;i++)
          cout<<r[i]<<" ";
     int area=0;
      for(i=0;i<n;i++)
      {
          area=max(area,(r[i]+l[i]-1)*heights[i]);
      }
        return area;
          
    }
    int maximalRectangle(vector<vector<char>>& matrix) {
        int i,j;
        if(matrix.size()==0)return 0;
        int area=0;
        vector<int>v1(matrix[0].size(),0);
        for(i=0;i<matrix.size();i++)
        {
            for(j=0;j<matrix[0].size();j++){  
                    if(matrix[i][j]=='1')
                        v1[j]++;
                    else
                        v1[j]=0;
            }
            
            area=max(area,largest(v1));
        }
        return area;
    }
};